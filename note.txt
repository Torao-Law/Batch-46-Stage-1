semantic dan non semantic
    - semantic: tag element yang memiliki artian / informasi spesifik dari konten tersebut.
    - non-semantic: tidak memiliki artian / tidak memberikan informasi spesifik.

blok element dan inline element.
    - blok element: ketika membuat element baru maka dia akan ngeblok line baru
    - inline element: tidak akan  menghabiskan.

cara menambahkan css :
css inline = attribute style
css internal = 
    <style>
        body {
            background-color: red;
        }
    </style>

css external = membuat file baru yang berekstensi .css

Padding & margin(jarak) :
- padding ukuran dari pinggir luar konten hingga ke dalam konten
- margin ukuran dari pinggir konten ke konten lain.

<h1 style="background-color: yellow">H</h1>
        <h1>Hello Batch 46</h1>

        <p>Hello Batch 46</p><p>Hello Batch 47</p>
        <span>
            Farhan
        </span>

        <span>
            Slamet
        </span>
        <div>
            <span>Hello Hai 2</span>
            <span>Hello Hai 2</span>
        </div>

        <a href="http://dumbways.id/" style="color: blue; font-weight: bold;background-color: yellow">Visit Dumbways.ID</a>
        <a href="http://dumbways.id/" style="color: blue; font-weight: bold;background-color: green">Visit Dumbways.ID</a>

        <div>
            <a href="http://dumbways.id/" style="color: blue; font-weight: bold;background-color: red">Visit Dumbways.ID</a>
        </div>






========================================================================================
Day 2
Cara menuliskan styling :
Inline – menuliskan perintah CSS langsung pada elemen HTML.
Internal – menuliskan perintah CSS di bagian <head> HTML.
Eksternal – menuliskan perintah CSS pada file yang berbeda (eksternal)


CSS HIERARCHY -> Spesifikasi pemilihan kategori dalam css.
- Inline CSS (priority)
- ID selector
- Class selector
- Tag (html) selector


input:focus {
    outline: none !important;
    border:1px solid red;
    box-shadow: 0 0 10px #719ECE;
}





========================================================================================
DAY 3 - FORM SUBMISSION
------------------------
Data store adalah bagaimana menyimpan data didalam sebuah file yang akan di gunakan.

1. VARIABLE (var, const, let)
var => bisa di ubah (versi lama)
const => tidak bisa di ubah
let => bisa di ubah (versi baru)
// const myName = "Dandi Saputra"
// console.log(myName)

// let myName = "Yogi"
// console.log(myName)

// let myName1 = "Nero"
// console.log(myName1)

// var myName = "Dandi Saputra"
// console.log(myName)

// var myName = "Yogi"
// console.log(myName)


2. Type Data
- Type Data primitif dan non-primitif
- Primitif string, number, boolean, null, undifined.
// let myName = "Dandi Saputra, 123"
// console.log(typeof myName)

// let myAge = 1000
// console.log(myAge)
// console.log(typeof myAge)

// let isMarried = true/false
// console.log(isMarried)
// console.log(typeof isMarried)

// let tissue = null
// console.log(tissue)
// console.log(typeof tissue)

// let tissu = 0
// console.log(tissu)
// console.log(typeof tissu)


3. CONDITIONAL(KONDISI) JAVASCRIPT
// let myAge = 20

// kondisi if else
// if(myAge < 16) {
//     alert("Kamu sudah dewasa")
// } else {
//     alert("Masih bocil")
// }

// if(myAge < 14) {
//     alert("Belum bisa masuk SMP")
// } else if(myAge < 16) {
//     alert("Belum bisa masuk SMA")
// } else {
//     alert("Seharusnya sudah bekerja")
// }

4. FUNCTION JAVASCRIPT
- Deklarasi, menjalankan, parameter, argument, return.

// function helloWorld() {
//     // code here
//     let message = "Good Morning"
//     console.log("Hello World")
//     console.log(message)
// }

// helloWorld()

// const message = function() {
//     const name = "yoga"
//     console.log(name)
// }

// message()

// const greeting = () => {
//     console.log("Good Morning")
// }

// greeting()

function helloWorld(nilaiAwal, b) {
    return nilaiAwal + b
}

console.log(helloWorld(10, 5))
a.href = `https://mail.google.com/mail/?view=cm&fs=1&to=${destination}&su=${subject}&body=${message}` 
a.setAttribute('target', '_blank')


=============================================================================
DAY 4
object dan array
object dapat menyimpan nilai lebih dari satu yang dimana di simpan didalam properti.
array dapat menyimpan nilai lebih dari satu yang dimana di simpan didalam index.

Object
let myStatus = {
    myName: "Dandi Saputra",
    myAge: 17,
    isMarried: true,
    myCar: {
        car1: "rubicon",
        car2: "bmw"
    }
}
console.log(myStatus.myCar.car1)
console.table(myStatus)

ARRAY
let myStatus = ["Dandi Saputra", 17, true, ["rubicon", "bmw"]]
console.log(myStatus[3][0])
console.table(myStatus)

// ARRAY OF OBJECT
let Batch46 = [
    {
        name: "Johanes",
        age: 36,
        isMarried: false,
        myCar: {
            car1: "rubicon",
            car2: "bmw"
        }
    },
    {
        name: "Nico",
        age: 45,
        isMarried: true,
        myCar: ["rubicon", "bmw"]
    }
]
console.log(Batch46[0].myCar.car2)
console.log(Batch46[1].myCar[0])
// console.log(Batch46[0].name);
// console.log(Batch46[1].age)
// console.log(Batch46[0]['name'])
// console.table(Batch46)
// console.log(Batch46)


